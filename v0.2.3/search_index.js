var documenterSearchIndex = {"docs":
[{"location":"library/function_index/#main-index","page":"Function index","title":"Index","text":"","category":"section"},{"location":"library/function_index/","page":"Function index","title":"Function index","text":"Pages = [\"public.md\", \"internals.md\", \"function_index.md\"]","category":"page"},{"location":"conformal_cubed_sphere/#CubedSphere.jl-Documentation","page":"Conformal Cubed Sphere","title":"CubedSphere.jl Documentation","text":"","category":"section"},{"location":"conformal_cubed_sphere/#Conformal-cubed-sphere-mapping","page":"Conformal Cubed Sphere","title":"Conformal cubed sphere mapping","text":"","category":"section"},{"location":"conformal_cubed_sphere/","page":"Conformal Cubed Sphere","title":"Conformal Cubed Sphere","text":"The conformal method for projecting the cube on the sphere was first described the paper by Rančić et al., (1996).","category":"page"},{"location":"conformal_cubed_sphere/","page":"Conformal Cubed Sphere","title":"Conformal Cubed Sphere","text":"Rančić et al., (1996). A global shallow-water model using an expanded spherical cube - Gnomonic versus conformal coordinates, Quarterly Journal of the Royal Meteorological Society.","category":"page"},{"location":"conformal_cubed_sphere/","page":"Conformal Cubed Sphere","title":"Conformal Cubed Sphere","text":"Imagine a cube inscribed into a sphere. Using conformal_cubed_sphere_mapping we can map the face of the cube onto the sphere. conformal_cubed_sphere_mapping maps the face that corresponds to the sphere's sector that includes the North Pole, that is, the face of the cube is oriented normal to the z axis. This cube's face is parametrized with orthogonal coordinates (x y) in -1 1 times -1 1 with (x y) = (0 0) being in the center of the cube's face, that is on the z axis.","category":"page"},{"location":"conformal_cubed_sphere/","page":"Conformal Cubed Sphere","title":"Conformal Cubed Sphere","text":"We can visualize the mapping.","category":"page"},{"location":"conformal_cubed_sphere/","page":"Conformal Cubed Sphere","title":"Conformal Cubed Sphere","text":"using Rotations\nusing CairoMakie\nCairoMakie.activate!(type = \"svg\")\nusing CubedSphere","category":"page"},{"location":"conformal_cubed_sphere/","page":"Conformal Cubed Sphere","title":"Conformal Cubed Sphere","text":"using CairoMakie\nusing CubedSphere\n\nN = 16\n\nx = range(-1, 1, length=N)\ny = range(-1, 1, length=N)\n\nX = zeros(length(x), length(y))\nY = zeros(length(x), length(y))\nZ = zeros(length(x), length(y))\n\nfor (j, y′) in enumerate(y), (i, x′) in enumerate(x)\n    X[i, j], Y[i, j], Z[i, j] = conformal_cubed_sphere_mapping(x′, y′)\nend\n\nfig = Figure(resolution = (800, 400))\n\nax2D = Axis(fig[1, 1], aspect = 1)\nax3D = Axis3(fig[1, 2], aspect = (1, 1, 1), limits = ((-1, 1), (-1, 1), (-1, 1)))\n\nfor ax in [ax2D, ax3D]\n    hidedecorations!(ax)\n    wireframe!(ax, X, Y, Z)\nend\n\ncolsize!(fig.layout, 1, Auto(0.8))\ncolgap!(fig.layout, 40)\n\ncurrent_figure()","category":"page"},{"location":"conformal_cubed_sphere/","page":"Conformal Cubed Sphere","title":"Conformal Cubed Sphere","text":"Above, we plotted the mapping from the cube's face onto the sphere both in a 2D projection (e.g., overlooking the sphere down to its North Pole) and in 3D space.","category":"page"},{"location":"conformal_cubed_sphere/","page":"Conformal Cubed Sphere","title":"Conformal Cubed Sphere","text":"We can then use Rotations.jl to rotate the face of the sphere that includes the North Pole and this way obtain all six faces of the sphere.","category":"page"},{"location":"conformal_cubed_sphere/","page":"Conformal Cubed Sphere","title":"Conformal Cubed Sphere","text":"using Rotations\n\nfig = Figure(resolution = (800, 400))\n\nax2D = Axis(fig[1, 1], aspect = 1)\nax3D = Axis3(fig[1, 2], aspect = (1, 1, 1), limits = ((-1, 1), (-1, 1), (-1, 1)))\n\nfor ax in [ax2D, ax3D]\n    wireframe!(ax, X, Y, Z)\nend\n\nrotations = (RotX(π/2), RotX(-π/2), RotY(π/2), RotY(-π/2), RotX(π))\n\nfor R in rotations\n    X′ = similar(X)\n    Y′ = similar(Y)\n    Z′ = similar(Z)\n\n    for I in CartesianIndices(X)\n        X′[I], Y′[I], Z′[I] = R * [X[I], Y[I], Z[I]]\n    end\n\n    for ax in [ax2D, ax3D]\n        wireframe!(ax, X′, Y′, Z′)\n    end\nend\n\ncolsize!(fig.layout, 1, Auto(0.8))\ncolgap!(fig.layout, 40)\n\ncurrent_figure()","category":"page"},{"location":"library/outline/#Library-Outline","page":"Contents","title":"Library Outline","text":"","category":"section"},{"location":"library/outline/","page":"Contents","title":"Contents","text":"Pages = [\"public.md\", \"internals.md\", \"function_index.md\"]","category":"page"},{"location":"library/internals/#Private-types-and-functions","page":"Private","title":"Private types and functions","text":"","category":"section"},{"location":"library/internals/","page":"Private","title":"Private","text":"Documentation for CubedSphere.jl's internal interface.","category":"page"},{"location":"library/internals/#CubedSphere","page":"Private","title":"CubedSphere","text":"","category":"section"},{"location":"library/internals/","page":"Private","title":"Private","text":"Modules = [CubedSphere]\nPublic = false","category":"page"},{"location":"library/internals/#CubedSphere.find_N-Tuple{Any}","page":"Private","title":"CubedSphere.find_N","text":"find_N(r; decimals=15)\n\nReturn the required number of points we need to consider around the circle of radius r to compute the conformal map series coefficients up to decimals points. The number of points is computed based on the estimate of eq. (B9) in the paper by Rančić et al. (1996). That is, is the smallest integer N (which is chosen to be a power of 2 so that the FFTs are efficient) for which\n\nN - frac712 fracmathrmlog_10(N)mathrmlog_10(r) - fracr + mathrmlog_10(A₁  C)-4 mathrmlog_10(r)  0\n\nwhere r is the number of decimals we are aiming for and\n\nC = fracsqrt3 Gamma(13) A₁^13256^13 π\n\nwith A₁ an estimate of the Z^1 Taylor series coefficient of W(Z).\n\nFor A₁  14771 we get C  0265.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#CubedSphere.find_taylor_coefficients","page":"Private","title":"CubedSphere.find_taylor_coefficients","text":"find_taylor_coefficients(r = 1 - 1e-7;\n                         Niterations = 30,\n                         maximum_coefficients = 256,\n                         Nevaluations = find_N(r; decimals=15))\n\nReturn the Taylor coefficients for the conformal map Z to W and also of the inverse map, W to Z, where Z = z^4 and W = w^3. In particular, it returns the coefficients A_k of the Taylor series\n\nW(Z) = sum_k=1^infty A_k Z^k\n\nand also coefficients B_k the inverse Taylor series\n\nZ(W) = sum_k=1^infty B_k Z^k\n\nThe algorithm to obtain the coefficients follows the procedure described in the Appendix of the paper by Rančić et al. (1996).\n\nArguments\n\nr (positional): the radius about the center and the edge of the cube used in the algorithm described by Rančić et al. (1996). r must be less than 1; default: 1 - 10^-7.\nmaximum_coefficients (keyword): the truncation for the Taylor series; default: 256.\nNiterations (keyword): the number of update iterations we perform on the Taylor coefficients A_k; default: 30.\nNevaluations (keyword): the number of function evaluations in over the circle of radius r; default find_N(r; decimals=15); see find_N.\n\nExample\n\njulia> using CubedSphere\n\njulia> using CubedSphere: find_taylor_coefficients\n\njulia> A, B = find_taylor_coefficients(1-1e-4);\n[ Info: Computing the first 256 coefficients of the Taylor serieses\n[ Info: using 32768 function evaluations on a circle with radius 0.9999.\n100.0%┣████████████████████████████████████████████┫ 30/30 [00:02<00:00, 12it/s]\n\njulia> A[1:10]\n10-element Vector{Float64}:\n  1.4771306289227293\n -0.3818351018795475\n -0.05573057838030261\n -0.008958833150428962\n -0.007913155711663374\n -0.004866251689037038\n -0.0032925152429762843\n -0.0023548122712604494\n -0.0017587029515141275\n -0.0013568087584722149\n\ninfo: Reproducing Rančić et al., (1996) coefficient table\nTo reproduce the coefficients tabulated by Rančić et al., (1996) use the default values, i.e., r = 1 - 10^-7.\n\nReferences\n\nRančić et al., (1996). A global shallow-water model using an expanded spherical cube - Gnomonic versus conformal coordinates, Quarterly Journal of the Royal Meteorological Society.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/#Elliptic.Jacobi.dn-Tuple{Complex, Real}","page":"Private","title":"Elliptic.Jacobi.dn","text":"dn(z::Complex, m::Real)\n\nCompute the Jacobi elliptic function dn(z | m) following Abramowitz & Stegun (1964), Eq. 16.21.4.\n\n\n\n\n\n","category":"method"},{"location":"#CubedSphere.jl-Documentation","page":"Home","title":"CubedSphere.jl Documentation","text":"","category":"section"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"CubedSphere.jl provides tools for generating cubed sphere grids. The package is developed by the Climate Modeling Alliance.","category":"page"},{"location":"library/public/#Public-Documentation","page":"Public","title":"Public Documentation","text":"","category":"section"},{"location":"library/public/","page":"Public","title":"Public","text":"Documentation for CubedSphere.jl's public interface.","category":"page"},{"location":"library/public/","page":"Public","title":"Public","text":"See the Internals section of the manual for internal package docs covering all submodules.","category":"page"},{"location":"library/public/#CubedSphere","page":"Public","title":"CubedSphere","text":"","category":"section"},{"location":"library/public/","page":"Public","title":"Public","text":"Modules = [CubedSphere]\nPrivate = false","category":"page"},{"location":"library/public/#CubedSphere.cartesian_to_lat_lon-Tuple{Any, Any, Any}","page":"Public","title":"CubedSphere.cartesian_to_lat_lon","text":"cartesian_to_lat_lon(x, y, z)\n\nConvert 3D cartesian coordinates (x, y, z) on the sphere to latitude-longitude. Returns a tuple (latitude, longitude) in degrees.\n\nThe equatorial plane falls at z = 0, latitude is the angle measured from the equatorial plane, and longitude is measured anti-clockwise (eastward) from x-axis (y = 0) about the z-axis.\n\nExamples\n\nFind latitude-longitude of the North Pole\n\njulia> using CubedSphere\n\njulia> x, y, z = (0, 0, 6.4e6); # cartesian coordinates of North Pole [in meters]\n\njulia> cartesian_to_lat_lon(x, y, z)\n(90.0, 0.0)\n\nLet's confirm that for few points on the unit sphere we get the answers we expect.\n\njulia> cartesian_to_lat_lon(√2/4, -√2/4, √3/2)\n(59.99999999999999, -45.0)\n\njulia> cartesian_to_lat_lon(-√6/4, √2/4, -√2/2)\n(-45.00000000000001, 150.0)\n\n\n\n\n\n","category":"method"},{"location":"library/public/#CubedSphere.conformal_cubed_sphere_inverse_mapping-Tuple{Any, Any, Any}","page":"Public","title":"CubedSphere.conformal_cubed_sphere_inverse_mapping","text":"conformal_cubed_sphere_inverse_mapping(X, Y, Z)\n\nInverse mapping for conformal cube sphere for quadrant of North-pole face in which X and Y are both positive. All other mappings to other cube face coordinates can be recovered from rotations of this map. There a 3 other quadrants for the north-pole face and five other faces for a total of twenty-four quadrants. Because of symmetry only the reverse for a single quadrant is needed. Because of branch cuts and the complex transform the inverse mappings are multi-valued in general, using a single quadrant case allows a simple set of rules to be applied.\n\nThe mapping is valid for the cube face quadrant defined by 0  x  1 and 0  y  1, where a full cube face has extent -1  x  1 and -1  y  1. The quadrant for the mapping is from a cube face that has \"north-pole\" at its center (x=0 y=0). i.e., has X, Y, Z = (0, 0, 1) at its center. The valid ranges of X and Y for this mapping and convention are a quadrant defined be geodesics that connect the points A, B, C and D, on the shell of a sphere of radius R with X, Y coordinates as follows\n\nA = (0, 0)\nB = (√2, 0)\nC = (√3/3, √3/3)\nD = (0, √2)\n\n\n\n\n\n","category":"method"},{"location":"library/public/#CubedSphere.conformal_cubed_sphere_mapping-Tuple{Any, Any}","page":"Public","title":"CubedSphere.conformal_cubed_sphere_mapping","text":"conformal_cubed_sphere_mapping(x, y)\n\nConformal mapping from a face of a cube onto the equivalent sector of a sphere with unit radius.\n\nMap the north-pole face of a cube with coordinates (x y) onto the equivalent sector of the sphere with coordinates (X Y Z).\n\nThe cube's face oriented normal to z-axis and its coordinates must lie within the range -1  x  1, -1  y  1 with its center at (x y) = (0 0). The coordinates X Y increase in the same direction as x y.\n\nThe numerical conformal mapping used here is described by Rančić et al. (1996).\n\nThis is a Julia translation of MATLAB code from MITgcm that is based on Fortran 77 code from Jim Purser & Misha Rančić.\n\nExamples\n\nThe center of the cube's face (x y) = (0 0) is mapped onto (X Y Z) = (0 0 1)\n\njulia> using CubedSphere\n\njulia> conformal_cubed_sphere_mapping(0, 0)\n(0, 0, 1.0)\n\nand the edge of the cube's face at (x y) = (1 1) is mapped onto (X Y Z) = (33 33 33)\n\njulia> using CubedSphere\n\njulia> conformal_cubed_sphere_mapping(1, 1)\n(0.5773502691896256, 0.5773502691896256, 0.5773502691896257)\n\nReferences\n\nRančić et al., (1996). A global shallow-water model using an expanded spherical cube - Gnomonic versus conformal coordinates, Quarterly Journal of the Royal Meteorological Society.\n\n\n\n\n\n","category":"method"},{"location":"library/public/#Elliptic.Jacobi.cn-Tuple{Complex, Real}","page":"Public","title":"Elliptic.Jacobi.cn","text":"cn(z::Complex, m::Real)\n\nCompute the Jacobi elliptic function cn(z | m) following Abramowitz & Stegun (1964), Eq. 16.21.3.\n\n\n\n\n\n","category":"method"},{"location":"library/public/#Elliptic.Jacobi.sn-Tuple{Complex, Real}","page":"Public","title":"Elliptic.Jacobi.sn","text":"sn(z::Complex, m::Real)\n\nCompute the Jacobi elliptic function sn(z | m) following Abramowitz & Stegun (1964), Eq. 16.21.2.\n\n\n\n\n\n","category":"method"}]
}
