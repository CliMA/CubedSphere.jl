using TaylorSeries

A_Rancic = [
    +0.00000000000000,
    +1.47713062600964,
    -0.38183510510174,
    -0.05573058001191,
    -0.00895883606818,
    -0.00791315785221,
    -0.00486625437708,
    -0.00329251751279,
    -0.00235481488325,
    -0.00175870527475,
    -0.00135681133278,
    -0.00107459847699,
    -0.00086944475948,
    -0.00071607115121,
    -0.00059867100093,
    -0.00050699063239,
    -0.00043415191279,
    -0.00037541003286,
    -0.00032741060100,
    -0.00028773091482,
    -0.00025458777519,
    -0.00022664642371,
    -0.00020289261022,
    -0.00018254510830,
    -0.00016499474461,
    -0.00014976117168,
    -0.00013646173946,
    -0.00012478875823,
    -0.00011449267279,
    -0.00010536946150,
    -0.00009725109376
]

A_series = Taylor1(A_Rancic)
B_series = inverse(A_series)
B_Rancic = B_series.coeffs

function taylor_coefficients(A)
    A₁_expected = 1.47713062600964
    for _ in 1:10
        @printf("A₁ ≈ %.16f + %.16fim, ΔA₁ = %.16f + %.16fim\n", real(A[1]), imag(A[1]), real(A₁_expected - A[1]), imag(A₁_expected - A[1]))
        ϕ = range(-π/4, π/4, length=101)
        z = @. r * exp(im * ϕ)
        z′ = @. 1 - z
        Z = @. z′ .^ 4
        W = [sum(A[k] * Z[n]^k for k in 1:length(A)) for n in 1:length(Z)]
        g = [W[n] * r^4 * exp(im * θ) for (n, θ) in enumerate(range(-π, π, length=length(W)))]
        g̃ = fft(g)
        A = [g̃[k] / r^(4k) for k in 1:length(g̃)]
    end
end
